<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构</title>
      <link href="/2022/03/08/yedn39/"/>
      <url>/2022/03/08/yedn39/</url>
      
        <content type="html"><![CDATA[<h1 id="1-顺序表"><a href="#1-顺序表" class="headerlink" title="1.顺序表"></a>1.顺序表</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Vector</span>&#123;</span><br><span class="line"><span class="type">int</span> *data;</span><br><span class="line"><span class="type">int</span> length,size;</span><br><span class="line">&#125;Vector;</span><br><span class="line"><span class="comment">//顺序表的数据结构定义</span></span><br><span class="line"><span class="comment">//解释：data为数据域，length为顺序表长度，size为顺序表的大小</span></span><br><span class="line"></span><br><span class="line"><span class="function">Vector *<span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">Vector *vec=(Vector *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Vector));</span><br><span class="line">vec-&gt;data=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">int</span>)*n);</span><br><span class="line">vec-&gt;length=<span class="number">0</span>;</span><br><span class="line">vec-&gt;size=n;</span><br><span class="line"><span class="keyword">return</span> vec;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顺序表的初始化</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(Vector *vec)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vec==<span class="literal">NULL</span>) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">free</span>(vec-&gt;data);</span><br><span class="line"><span class="built_in">free</span>(vec);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顺序表的销毁</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">expand</span><span class="params">(Vector *vec)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> new_size=vec-&gt;size*<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> *p=(<span class="type">int</span>*)<span class="built_in">realloc</span>(vec-&gt;data,<span class="built_in">sizeof</span>(<span class="type">int</span>)*new_size);</span><br><span class="line"><span class="keyword">if</span>(p==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">vec-&gt;data=p;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顺序表的扩容</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(Vector *vec,<span class="type">int</span> ind,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vec==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ind&lt;<span class="number">0</span>||ind&gt;vec-&gt;length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(vec-&gt;length&gt;vec-&gt;size)&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">expand</span>(vec)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=vec-&gt;length;i&gt;ind;i--)&#123;</span><br><span class="line">vec-&gt;data[i]=vec-&gt;data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">vec-&gt;data[ind]=val;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顺序表的插入操作</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">erase</span><span class="params">(Vector *vec,<span class="type">int</span> ind)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vec==<span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ind&lt;<span class="number">0</span>||ind&gt;vec-&gt;length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(vec-&gt;length==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=ind;i&lt;vec-&gt;length;i++)&#123;</span><br><span class="line">vec-&gt;data[i]=vec-&gt;data[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">vec-&gt;length-=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顺序表的删除操作</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Output</span><span class="params">(Vector *vec)</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Vector(%d)=[&quot;</span>,vec-&gt;length);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;vec-&gt;length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,vec-&gt;data[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;]\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//顺序表的输出操作</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">srand</span>(<span class="built_in">time</span>(<span class="number">0</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_OP 20</span></span><br><span class="line">Vector *vec=<span class="built_in">init</span>(<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> op,ind,val;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MAX_OP;i++)&#123;</span><br><span class="line">op=<span class="built_in">rand</span>()%<span class="number">4</span>;</span><br><span class="line">ind=<span class="built_in">rand</span>()%(vec-&gt;length+<span class="number">1</span>);<span class="comment">//调整+2，+3来实现多元验证，在非法输入的情况下，验证是否能通过。</span></span><br><span class="line">val=<span class="built_in">rand</span>()%<span class="number">100</span>;</span><br><span class="line"><span class="keyword">switch</span>(op)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;insert  %d at %d to vector =%d\n&quot;</span>,val,ind,<span class="built_in">insert</span>(vec,ind,val));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;erase item at %d from vector=%d\n&quot;</span>,ind,<span class="built_in">erase</span>(vec,ind));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Output</span>(vec);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
