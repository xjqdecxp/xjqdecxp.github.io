{"meta":{"title":"cxp's Blog","subtitle":"","description":"","author":"xjqdecxp","url":"http://example.com","root":"/"},"pages":[{"title":"categories","date":"2022-03-20T07:47:46.000Z","updated":"2022-03-20T07:48:51.083Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-03-20T07:49:27.000Z","updated":"2022-03-20T07:50:30.533Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"个人博客完善记录","slug":"个人博客完善记录","date":"2022-03-20T07:54:00.000Z","updated":"2022-03-20T08:11:29.614Z","comments":true,"path":"2022/03/20/个人博客完善记录/","link":"","permalink":"http://example.com/2022/03/20/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%AE%8C%E5%96%84%E8%AE%B0%E5%BD%95/","excerpt":"","text":"带标记的为已经完成的 语言 网站资料 导航菜单 代码 代码高亮主题 代码复製 代码框展开/关闭 代码换行 代码高度限制 社交图标 主页文章节选(自动节选和文章页description) 顶部图 文章置顶 文章封面 文章页相关配置 文章meta显示 文章版权 10.3. 文章打赏 10.4. TOC10.4.1. 为特定的文章配置10.5. 相关文章10.6. 文章锚点10.7. 文章过期提醒10.8. 文章编辑按钮10.9. 文章分页按钮11. 头像12. 图片描述13. 复製相关配置14. Footer 设置14.1. 博客年份14.2. 页脚自定义文本15. 右下角按钮15.1. 简繁转换15.2. 夜间模式15.3. 閲读模式15.4. 按钮排序16. 侧边栏设置16.1. 侧边排版16.2. 访问人数 busuanzi (UV 和 PV)16.3. 运行时间16.4. 最新评论16.5. 自定义添加栏目17. 标籤外挂（Tag Plugins）17.1. Note (Bootstrap Callout)17.2. Gallery相册图库17.3. Gallery相册17.4. tag-hide17.5. mermaid17.6. Tabs17.7. Button17.8. inlineImg17.9. label17.10. timeline17.11. flink 下面为接下来要完成的功能 ==文章分类== ==文章图片==","categories":[],"tags":[]},{"title":"数据结构和算法","slug":"yedn39","date":"2022-03-08T03:41:47.000Z","updated":"2022-03-20T07:41:42.837Z","comments":true,"path":"2022/03/08/yedn39/","link":"","permalink":"http://example.com/2022/03/08/yedn39/","excerpt":"","text":"1.顺序表123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;time.h&gt;typedef struct Vector&#123; int *data; int length,size;&#125;Vector;//顺序表的数据结构定义//解释：data为数据域，length为顺序表长度，size为顺序表的大小Vector *init(int n)&#123; Vector *vec=(Vector *)malloc(sizeof(Vector)); vec-&gt;data=(int *)malloc(sizeof(int)*n); vec-&gt;length=0; vec-&gt;size=n; return vec;&#125;//顺序表的初始化//void clear(Vector *vec)&#123; if(vec==NULL) return ; free(vec-&gt;data); free(vec); return ;&#125;//顺序表的销毁//int expand(Vector *vec)&#123; int new_size=vec-&gt;size*2; int *p=(int*)realloc(vec-&gt;data,sizeof(int)*new_size); if(p==NULL) return 0; vec-&gt;data=p; return 1;&#125;//顺序表的扩容//int insert(Vector *vec,int ind,int val)&#123; if(vec==NULL) return 0; if(ind&lt;0||ind&gt;vec-&gt;length) return 0; if(vec-&gt;length&gt;vec-&gt;size)&#123; if(!expand(vec)) return 0; &#125; for(int i=vec-&gt;length;i&gt;ind;i--)&#123; vec-&gt;data[i]=vec-&gt;data[i-1]; &#125; vec-&gt;data[ind]=val; return 1;&#125;//顺序表的插入操作//int erase(Vector *vec,int ind)&#123; if(vec==NULL) return 0; if(ind&lt;0||ind&gt;vec-&gt;length) return 0; if(vec-&gt;length==0) return 0; for(int i=ind;i&lt;vec-&gt;length;i++)&#123; vec-&gt;data[i]=vec-&gt;data[i+1]; &#125; vec-&gt;length-=1; return 1;&#125;//顺序表的删除操作//void Output(Vector *vec)&#123; printf(&quot;Vector(%d)=[&quot;,vec-&gt;length); for(int i=0;i&lt;vec-&gt;length;i++)&#123; if(i!=0)&#123; printf(&quot;, &quot;); &#125; printf(&quot;%d&quot;,vec-&gt;data[i]); &#125; printf(&quot;]\\n&quot;); return ;&#125;//顺序表的输出操作//int main()&#123; srand(time(0));#define MAX_OP 20 Vector *vec=init(1); int op,ind,val; for(int i=0;i&lt;MAX_OP;i++)&#123; op=rand()%4; ind=rand()%(vec-&gt;length+1);//调整+2，+3来实现多元验证，在非法输入的情况下，验证是否能通过。 val=rand()%100; switch(op)&#123; case 2: case 3: case 0: printf(&quot;insert %d at %d to vector =%d\\n&quot;,val,ind,insert(vec,ind,val)); break; case 1: printf(&quot;erase item at %d from vector=%d\\n&quot;,ind,erase(vec,ind)); break; &#125; Output(vec); printf(&quot;\\n&quot;); &#125; return 0;&#125;","categories":[],"tags":[]}],"categories":[],"tags":[]}