{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"数据结构","slug":"yedn39","date":"2022-03-08T03:41:47.000Z","updated":"2022-03-19T15:17:04.913Z","comments":true,"path":"2022/03/08/yedn39/","link":"","permalink":"http://example.com/2022/03/08/yedn39/","excerpt":"","text":"1.顺序表123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;time.h&gt;typedef struct Vector&#123; int *data; int length,size;&#125;Vector;//顺序表的数据结构定义//解释：data为数据域，length为顺序表长度，size为顺序表的大小Vector *init(int n)&#123; Vector *vec=(Vector *)malloc(sizeof(Vector)); vec-&gt;data=(int *)malloc(sizeof(int)*n); vec-&gt;length=0; vec-&gt;size=n; return vec;&#125;//顺序表的初始化//void clear(Vector *vec)&#123; if(vec==NULL) return ; free(vec-&gt;data); free(vec); return ;&#125;//顺序表的销毁//int expand(Vector *vec)&#123; int new_size=vec-&gt;size*2; int *p=(int*)realloc(vec-&gt;data,sizeof(int)*new_size); if(p==NULL) return 0; vec-&gt;data=p; return 1;&#125;//顺序表的扩容//int insert(Vector *vec,int ind,int val)&#123; if(vec==NULL) return 0; if(ind&lt;0||ind&gt;vec-&gt;length) return 0; if(vec-&gt;length&gt;vec-&gt;size)&#123; if(!expand(vec)) return 0; &#125; for(int i=vec-&gt;length;i&gt;ind;i--)&#123; vec-&gt;data[i]=vec-&gt;data[i-1]; &#125; vec-&gt;data[ind]=val; return 1;&#125;//顺序表的插入操作//int erase(Vector *vec,int ind)&#123; if(vec==NULL) return 0; if(ind&lt;0||ind&gt;vec-&gt;length) return 0; if(vec-&gt;length==0) return 0; for(int i=ind;i&lt;vec-&gt;length;i++)&#123; vec-&gt;data[i]=vec-&gt;data[i+1]; &#125; vec-&gt;length-=1; return 1;&#125;//顺序表的删除操作//void Output(Vector *vec)&#123; printf(&quot;Vector(%d)=[&quot;,vec-&gt;length); for(int i=0;i&lt;vec-&gt;length;i++)&#123; if(i!=0)&#123; printf(&quot;, &quot;); &#125; printf(&quot;%d&quot;,vec-&gt;data[i]); &#125; printf(&quot;]\\n&quot;); return ;&#125;//顺序表的输出操作//int main()&#123; srand(time(0));#define MAX_OP 20 Vector *vec=init(1); int op,ind,val; for(int i=0;i&lt;MAX_OP;i++)&#123; op=rand()%4; ind=rand()%(vec-&gt;length+1);//调整+2，+3来实现多元验证，在非法输入的情况下，验证是否能通过。 val=rand()%100; switch(op)&#123; case 2: case 3: case 0: printf(&quot;insert %d at %d to vector =%d\\n&quot;,val,ind,insert(vec,ind,val)); break; case 1: printf(&quot;erase item at %d from vector=%d\\n&quot;,ind,erase(vec,ind)); break; &#125; Output(vec); printf(&quot;\\n&quot;); &#125; return 0;&#125;","categories":[],"tags":[]}],"categories":[],"tags":[]}